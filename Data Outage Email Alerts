#Run in Spyder (Anaconda)
#import packages
#All these functions are used to run daily tasks like checking to make sure data is updated and flowing in correctly, creating tables based on SQL Server outages to have automated alerts on our dashboards, update my team with our main metrics every morning, etc. 

import pyodbc
import pandas as pd
import schedule
import time
import warnings
import datetime

#%% Queries and Email List
#All the queries used in this script
# All sql tables replaced with "table" for privacy reasons
#username/password redacted as well

Calls_WeeklyReporting = """
select 
max(cast(event_week_start as date)) as "Max Event Week End"
,dateadd(day, -16, cast(getdate() as date)) as "Current Date"
,case when max(cast(event_week_start as date))  = dateadd(day, -16, cast(getdate() as date)) then 1 else 0 end as "Flag"
from table
having case when max(cast(event_week_start as date))  = dateadd(day, -16, cast(getdate() as date)) then 1 else 0 end = 0
"""

TCs_WeeklyReporting = """
select 
max(cast(event_week_start as date)) as "Max Event Week End"
,dateadd(day, -16, cast(getdate() as date)) as "Current Date"
,case when max(cast(event_week_start as date))  = dateadd(day, -16, cast(getdate() as date)) then 1 else 0 end as "Flag"
from  table
having case when max(cast(event_week_start as date))  = dateadd(day, -16, cast(getdate() as date)) then 1 else 0 end = 0
"""

ONTRAC_Combined_Orders = """
select CompleteDateDT,
   datename(weekday,CompleteDateDT) 'WeekDay',
   sum(case when OrderType='Install' then 1 else 0 end ) Install,
   sum(case when OrderType='TC' then 1 else 0 end ) TC,
   sum(case when OrderType='SRO' then 1 else 0 end ) SRO,
   sum(IsAvoidableFlg) Avoidable,
   sum(TimeInHouseFlg) TimeInHouse,
   coalesce(sum(IsContact48hrFlg),0) Contact48hr,
   sum(IsReworkFlg) ReworkFlg,
   sum(IsFTRContact_DenominatorFlg) FTRContact_Denominator,
   sum(IsFTRFailFlg) FTRFailFlg,
   sum(IsFTRReworkFlg) FTRReworkFlg,
   coalesce(sum(TUEligible),0) TUEligible,
   sum(case when pht_id is not null then 1 else 0 end) PHT,
   sum(case when Phone_LTR is not null then 1 else 0 end ) tNPS
FROM table
where CompleteDateDT >=GETDATE()-9
and OrderStatus = 'C'
group by CompleteDateDT,datename(weekday,CompleteDateDT)
order by CompleteDateDT desc
"""

ONTRAC_Linda_PHT = """
select CompleteDateDT,
   datename(weekday,CompleteDateDT) 'WeekDay',
   sum(case when OrderType='Install' then 1 else 0 end ) Install,
   sum(case when OrderType='TC' then 1 else 0 end ) TC,
   sum(case when OrderType='SRO' then 1 else 0 end ) SRO,
   sum(IsAvoidableFlg) Avoidable,
   sum(TimeInHouseFlg) TimeInHouse,
   coalesce(sum(IsContact48hrFlg),0) Contact48hr,
   sum(IsReworkFlg) ReworkFlg,
   sum(IsFTRContact_DenominatorFlg) FTRContact_Denominator,
   sum(IsFTRFailFlg) FTRFailFlg,
   sum(IsFTRReworkFlg) FTRReworkFlg,
   coalesce(sum(TUEligible),0) TUEligible,
   sum(case when pht_id is not null then 1 else 0 end) PHT,
   sum(case when Phone_LTR is not null then 1 else 0 end ) tNPS
FROM table
where CompleteDateDT >= '2023-03-25'
group by CompleteDateDT,datename(weekday,CompleteDateDT)
order by CompleteDateDT desc
"""

TechMPJProductivity = """
select
case when "Tech Productivity" > 1 then 1
when "Tech Productivity" < .1 then 1
else 0
end as "Flag"
from
(
select
CompleteDate
,cast(sum(TotalHours) as float)/cast(sum(AvailableHours) as float) as "Tech Productivity"
from table
where CompleteDate >= getdate()-9 and completedate <getdate()-4
group by CompleteDate
) a
group by case when "Tech Productivity" >1 then 1 when "Tech Productivity" < .1 then 1 else 0 end
having case when "Tech Productivity" >1 then 1 when "Tech Productivity" < .1 then 1 else 0 end = 1
""" 

SQL_Server_Jobs = """
    select b.*, 
	case when Last_Successful_Run IS NULL then '9999-12-31' 
	else Last_Successful_Run
	end as Last_Successful_Run
	from 
	(
    select 
    a.step_name as "Package"
    , a.message as "Message"
    , a."Run Date"
    ,a.run_duration as "Run Duration"
	--,l.Max_Run_Date
    ,avg(b.run_duration) as "Avg. Run Duration (prev 10 runs)"
    ,a.run_status
    ,case when avg(b.run_duration) = 0 then 1
    when cast(a.run_duration as float) / cast(avg(b.run_duration) as float) <= .1 then 1 
    else 0 end as "Flag"
    from 
    (
    SELECT step_name
    ,run_status
    ,run_duration
    ,message
    ,cast(cast(run_date as varchar(10)) as date) as "Run Date" 
    ,rank() over (partition by step_name order by instance_id desc) as "Rank"
    FROM table
    where run_duration > 0
    and step_name <> '(Job outcome)'
    ) a
    inner join
    (
    SELECT step_name
    ,run_status
    ,run_duration
    ,message
    ,cast(cast(run_date as varchar(10)) as date) as "Run Date" 
    ,rank() over (partition by step_name order by instance_id desc) as "Rank"
    FROM table
    where run_duration > 0
    and step_name <> '(Job outcome)'
    ) b
    on a.step_name = b.step_name
    where a."Rank" = 1
    and b."Rank" > 1
    group by 
    a.step_name
    , a.message
    , a."Run Date"
    ,a.run_duration
    ,a.run_status
    having case when avg(b.run_duration) = 0 then 1
    when cast(a.run_duration as float) / cast(avg(b.run_duration) as float) <= .1 then 1 
    else 0 end = 1

    UNION

    select * from
    (
    select 
    a.step_name as "Package"
    , a.message as "Message"
    , CONVERT(date, CONVERT(varchar(8), run_date), 112) as "Run Date"
    ,a.run_duration as "Run Duration"
    ,'0' as "Avg. Run Duration (prev 10 runs)"
    ,run_status
    ,rank() over (partition by a.step_name, run_date order by instance_id desc) as "Rank"
    from table a
    where run_status = 0
    and step_name <> '(Job outcome)'
    and CONVERT(date, CONVERT(varchar(8), run_date), 112) = cast(getdate() as date)
    ) a
	Where "Rank" = 1
	) b
	left join 
		(
			select 
			step_name
			,max("Run Date") as Last_Successful_Run
			from
			(
			select 
			distinct
			step_name
			,CONVERT(date, CONVERT(varchar(8), run_date), 112) as "Run Date"
			,run_status FROM table
			) a
			where run_status = 1
			group by step_name
		) l on l.step_name = b."Package"
"""

Spectra_Query = """
SELECT 
date(max(day_id))
,CASE WHEN date(max(day_id)) >= date_trunc('day', current_date - interval '2' day) THEN 1 ELSE 0 END AS flag
FROM table
having CASE WHEN date(max(day_id)) >= date_trunc('day', current_date - interval '2' day) THEN 1 ELSE 0 END = 0
"""

Spectra_Query_Last_7_Days = """
SELECT 
day_id as "Date"
,count(*) as "Count"
FROM table
where date(day_id) >= date_trunc('day', current_date - interval '7' day)
group by day_id
order by day_id desc
"""

Turners_Poll_Query = """
select max(day_id ) as Max_Date
,CASE WHEN date(max(day_id)) >= date_trunc('day', current_date - interval '2' day) THEN 1 ELSE 0 END AS flag
from table
having CASE WHEN date(max(day_id)) >= date_trunc('day', current_date - interval '2' day) THEN 1 ELSE 0 END = 0
"""

Turners_Poll_Last_7_Days = """
select day_id, count(*) as "Count"
from table
group by day_id
order by day_id desc
limit 7
"""

#Used in the emails 
Table_Name = [tablename1
              , tablename2
              ,tablename3
              ]   

Table_Name_2 = [tablename1
              , tablename2
              ,tablename3
              ]   
 

#Different email lists

email_list_1 = ["email1", "email2", etc.]

#%% Func Updated

def Func_Updated(query, table_name, table_name_2, email_list):
    #connect to SQL Server    
    cnxn_str = ("Driver={SQL Server Native Client 11.0};"
                "Server=server;"
                "Trusted_Connection=yes;")
    
    cnxn = pyodbc.connect(cnxn_str)
    
    #Uses the query specified in the first argument for the function (i.e. Func_Updated(query, etc.))
    
    data = pd.read_sql(query,cnxn)
    
    cnxn.close()
    
    #The query is set up so that if the table updates as expected, there will be no rows in the data frame
    #if there are no rows, then it just prints "Update Successful"
    #if the data frame has a row, that means it didnt update correctly and will email you "need to update" and then the tables name
    
    def string():
        global y
        y = ''
        if data.shape[0] == 0:
            y = "Update Successful"
        elif data.shape[0] > 0:
            y = "Need to update:  " + table_name

    string()
        
    #if the data frame has a row, it sends an email saying it didnt update correctly
    
    import smtplib
    from email.message import EmailMessage
    
    def email_alert(subject, body, to):
        if data.shape[0] > 0:
            msg = EmailMessage()
            msg.set_content(body)
            msg['subject'] = subject
            msg['to'] = to
            
            user = "noreply@email.com"
            msg ['from'] = user
            
            server = smtplib.SMTP('mailrelay.email.com', 25)
            server.ehlo()
            server.starttls()
            server.ehlo()
            server.send_message(msg)
            server.quit()
            
        elif data.shape[0] == 0:
            pass
    
    #emails people in the specified email_list in the function 
    #Func_Updated(..., ...., email_list)
    
    #email_alert(email header, email text string (y), email list )
    for recipients in email_list:
        if __name__ == '__main__':
            email_alert("SQL Data Update Alert - Tableau_Weekly", y, recipients)
            
    if data.shape[0] == 0:
        ct = datetime.datetime.now()
        print(table_name_2 + ' updated correctly on ', ct)
    elif data.shape[0] > 0:
        ct = datetime.datetime.now()
        print(table_name_2 + ' - Email Sent:', ct)
    
#%% Daily Data Dump

def Func_Data(query, email_list):
    #connect to SQL Server    
    cnxn_str = ("Driver={SQL Server Native Client 11.0};"
                "Server=server;"
                "Trusted_Connection=yes;")
    
    cnxn = pyodbc.connect(cnxn_str)
    
    #run the query
    data = pd.read_sql(query,cnxn)
    
    cnxn.close()
        
    #email function
    #pulls in the current date information, can be used in the email header if you want
    
    def date_function():
        import time
        timestr = time.strftime("%m%d%y")
        return timestr
    
    date = str(date_function())
    date = date[:2] + '/' + date[2:4] + '/' + date[4:6]
    
    #This is where you create the email with the information from the query
    
    import smtplib
    from email.mime.text import MIMEText
    from email.mime.multipart import MIMEMultipart
    
    #add the email of the people you want to include, if you want multiple recipients, it would look like this:
    #recipients = ['email1@', 'email2@email']     
        
    recipients = email_list
    emaillist = [elem.strip().split(',') for elem in recipients]
    msg = MIMEMultipart()
    #email header
    msg['Subject'] = "Ontrac_Combined_Completed_Orders - " + date
    
    #the email it is sent from, can be sent from your own email, but I use the Comcast No Reply
    #the html format below is so the email message is in a chart format    
    
    user = "noreply@email.com"
    msg ['from'] = user
    
    #Add the data from the data frame into the email body, HTML format
    
    html = """\
    <html>
      <head></head>
      <body>
          {0}
      </body>
    </html>
    """.format(data.to_html())
    
    part1 = MIMEText(html, 'html')
    msg.attach(part1)
    
    #The server Python uses to send the email
    
    server = smtplib.SMTP('mailrelay.email.com', 25)
    server.sendmail(msg['From'], emaillist , msg.as_string())

    
    ct = datetime.datetime.now()
    
    #Confirmation that the email sent, takes about 5 secs from getting the confirmation and receiving the email in Outlook
    
    print('Ontrac Combined Orders - Email Sent:', ct)


#%% SQL Server Packages

def Func_SQL_Server_Jobs(query, email_list):
    cnxn_str = ("Driver={SQL Server Native Client 11.0};"
                "Server=server"
                "Trusted_Connection=yes;")
    
    cnxn = pyodbc.connect(cnxn_str)
    
    #Query from SQL Server, no need for formatting, just paste as is from SQL Server
    # The triple " allow you to have a string be multiple lines in Python
        
    #run the query
    data = pd.read_sql(query,cnxn)
    
    #Bring in the SSIS excel data which has the package, table and dashboard link data
    
    df = pd.read_excel('C:\\Users\\user\\Documents\\SSIS_Excel.xlsx')
    
    #left join from the SQL data to the excel data
    df_combined = data.merge(df, on = 'Package', how = 'left')
    pd.set_option('display.max_columns', None)
    
    df_sql_server = df_combined[['Table', 'Last_Successful_Run']]
    
    table_names = df_combined['Table']
    table_names = table_names.dropna()
    
    query_results = []
    
    for table in table_names:
        query = f"""SELECT top 10 * FROM {table}"""
        result = pd.read_sql(query, cnxn)
        
        if result.empty:
            query_results.append("N")
        else:
            query_results.append("Y")
    
    cnxn.close()
    
    available_df = pd.DataFrame({'Table': table_names, 'Data Available': query_results})
    
    df_sql_server = df_sql_server.merge(available_df, on = 'Table', how = 'left')
    
    df_sql_server = df_sql_server[['Table', 'Data Available', 'Last_Successful_Run']]
    df_sql_server = df_sql_server.dropna()
    df_sql_server = df_sql_server.drop_duplicates()
    df_sql_server.rename(columns={'Table': 'TableName'}, inplace=True)
    
    #print(df_sql_server)
    
    server = 'server.onemail.com'
    driver='ODBC Driver 17 for SQL Server'
    conn = pyodbc.connect(f'DRIVER={driver};SERVER={server};;Trusted_Connection=yes;Regional=No;')
    cursor = conn.cursor()
    
    # Define your connection parameters
    server = 'server.onemail.com'
    database = ''
    trusted_connection = 'yes'  # This indicates Windows authentication
    connection_string = f'DRIVER={{SQL Server Native Client 11.0}};SERVER={server};DATABASE={database};Trusted_Connection={trusted_connection}'
    
    # Create a database connection
    cnxn = pyodbc.connect(connection_string)
    cursor = cnxn.cursor()
    
    # Clear the current data in the table
    clear_table_query = "DELETE FROM dbo.Tableau_Data_Outage_Temp_TW"
    cursor.execute(clear_table_query)
    cnxn.commit()
    
    # Sample data to insert
    data_to_insert = df_sql_server
    
    # Insert data into a table
    for index, row in data_to_insert.iterrows():
        values = (row['TableName'], row['Data Available'], row['Last_Successful_Run'])
        cursor.execute("INSERT INTO Tableau_Data_Outage_Temp_TW (TableName, Data_Available, Last_Successful_Run) VALUES (?, ?, ?)", values)
    
    # Commit the changes
    cnxn.commit()
    
    # Close the cursor and connection
    cursor.close()
    cnxn.close()
    
    #df_combined is now your main data frame
    
    #email function
    #pulls in the current date information, can be used in the email header if you want
    #I had this for a different package, but didnt add it to this email    
    
    def date_function():
        import time
        timestr = time.strftime("%m%d%y")
        return timestr
    
    date = str(date_function())
    date = date[:2] + '/' + date[2:4] + '/' + date[4:6]
    
    #This is where you create the email with the information from the query
    
    import smtplib
    from email.mime.text import MIMEText
    from email.mime.multipart import MIMEMultipart
    
    #add the email of the people you want to include, if you want multiple recipients, it would look like this:
    #recipients = ['tommy_wadelton@email.com', 'another_email@email.com']     
        
    recipients = email_list
    emaillist = [elem.strip().split(',') for elem in recipients]
    msg = MIMEMultipart()
    #email header
    msg['Subject'] = "SQL Server Jobs Update"
    
    #the email it is sent from, can be sent from your own email, but I use the Comcast No Reply
    #the html is to have a chart format
    
    user = "noreply@email.com"
    msg ['from'] = user
    
    #Add the data from the data frame into the email body, HTML format
    
    html = """\
    <html>
      <head></head>
      <body>
          {0}
      </body>
    </html>
    """.format(df_combined.to_html())
    
    part1 = MIMEText(html, 'html')
    msg.attach(part1)
    
    #The server Python uses to send the email
    
    server = smtplib.SMTP('mailrelay.email.com', 25)
    server.sendmail(msg['From'], emaillist , msg.as_string())
    
    ct = datetime.datetime.now()
    
    #Confirmation that the email sent, takes about 5 secs from getting the confirmation and receiving the email in Outlook
    
    print('SQL Server Jobs Email Sent:', ct)
        
#%% Spectra Backend Tables Updating

def Spectra_Updated(query, query2):
    
    import sqlalchemy
    import trino
    import pandas as pd
    
    user = ''
    passw = ''
    engine = sqlalchemy.create_engine(
        f'trino://{user}:{passw}@query.email.com:9443/user_space/dx_dl_qf_ebdptechopp',
        connect_args={
            "auth": trino.auth.BasicAuthentication(f"{user}", f"{passw}"),
            "http_scheme": "https",
            }
    )

    conn = engine.connect() 
    data = pd.read_sql(query, conn)
    
    data2 = pd.read_sql(query2, conn)
    
    conn.close()
        
    #if the data frame has a row, it sends an email saying it didnt update correctly
    
    import smtplib
    from email.mime.text import MIMEText
    from email.mime.multipart import MIMEMultipart
    import datetime
    
    def email_alert(subject, body, to):
        if data.shape[0] > 0:
            msg = MIMEMultipart()
            msg['subject'] = subject
            msg['to'] = to
            msg['from'] = "noreply@email.com"
            
            html = """\
            <html>
              <head></head>
              <body>
                  {0}
              </body>
            </html>
            """.format(data2.to_html())
            
            part1 = MIMEText(html, 'html')
            msg.attach(part1)
            
            # The server Python uses to send the email
            server = smtplib.SMTP('mailrelay.email.com', 25)
            server.ehlo()
            server.starttls()
            server.ehlo()
            server.sendmail(msg['From'], to , msg.as_string())
            server.quit()
        elif data.shape[0] == 0:
            pass
        
    html = """\
    <html>
      <head></head>
      <body>
          {0}
      </body>
    </html>
    """.format(data2.to_html())
    
    msg = MIMEMultipart()
    
    body = MIMEText(html, 'html')
    msg.attach(body)
    
    recipient = "tommy_wadelton@email.com"
    
    def date_function():
        import time
        timestr = time.strftime("%m%d%y")
        return timestr
    
    date = str(date_function())
    date = date[:2] + '/' + date[2:4] + '/' + date[4:6]
    
    email_alert("Spectra Table not updating - " + date, body, recipient)
            
            
    if data.shape[0] == 0:
        ct = datetime.datetime.now()
        print('Spectra Table updated correctly on ', ct)
    elif data.shape[0] > 0:
        ct = datetime.datetime.now()
        print(' - Email Sent:', ct)

#%% Line Break

def Line_Break():
    
    def date_function():
        import time
        timestr = time.strftime("%m%d%y")
        return timestr
    
    date = str(date_function())
    date = date[:2] + '/' + date[2:4] + '/' + date[4:6]
    
    print("\n", date, "\n")
    
#%% Automate all the functions, this is run on one of our virtual machines and helps my team keep track of 

schedule.every().day.at("09:00").do(Line_Break)

schedule.every().day.at("09:30").do(Func_Data, ONTRAC_Combined_Orders, email_list_2)

schedule.every().day.at("09:30").do(Func_Data, ONTRAC_Linda_PHT, email_list_5)

schedule.every().day.at("12:00").do(Func_SQL_Server_Jobs, SQL_Server_Jobs, email_list_3)

schedule.every().day.at("12:00").do(Spectra_Updated, Spectra_Query, Spectra_Query_Last_7_Days)

schedule.every().day.at("12:00").do(Spectra_Updated, Turners_Poll_Query, Turners_Poll_Last_7_Days)

schedule.every().day.at("15:00").do(Func_Updated, TechMPJProductivity, Table_Name[2], Table_Name_2[2], email_list_6)

schedule.every().tuesday.at("12:00").do(Func_Updated, Calls_WeeklyReporting, Table_Name[0], Table_Name_2[0], email_list_1)

schedule.every().tuesday.at("12:00").do(Func_Updated, TCs_WeeklyReporting, Table_Name[1], Table_Name_2[1], email_list_1)

while True:
    schedule.run_pending()
    time.sleep(600)
    
#%% Manual run if needed

Func_SQL_Server_Jobs(SQL_Server_Jobs, email_list_7)
